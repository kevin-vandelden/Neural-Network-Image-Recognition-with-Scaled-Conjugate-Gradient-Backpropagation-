%% Script for Preparing Photos for NN
% Property of Kevin VanDelden
% 5/12/2019

% This v2 is for distinguishing just between Ray Bans, Nike, or None,
% previous glasses were too similar in form factor

clear all
close all
clc

 %% Section 1: Loading files, can be commented out until adding pictures or folders
% % cd 'C:\Users\Kevin\Documents\MATLAB Exercises\GlassesNNProblem\Glasses\BlueBikes'
% % test=imread('WIN_20190512_13_50_41_Pro.jpg');
% 
% % Goal to make output a vector 0's and 1's
% 
% % [1;0;0] = Nike
% % [0;1;0] = RayBan
% % [0;0;1] = None
% 
%     
% resfactor=0.09;
% 
% cd 'C:\Users\Kevin\Documents\MATLAB Exercises\GlassesNNProblem\Glasses\Nike'    
% directory=dir;
% 
% for i=1:(length(dir)-2);
%     
%     tempnamenike=directory(i+2).name;
%     
%     tempimagenike=imread(tempnamenike);
%     % reading file name from directory
%     tempscalenike=imresize(tempimagenike,resfactor);
%     % resizing image to cut down on pixels
%     greyscalenike{i}=rgb2gray(tempscalenike);
%     % turning image to greyscale heatmap
%     matrixscalenike=cell2mat(greyscalenike(i));
%     imagematnike(:,i)=reshape(matrixscalenike,1,[]);
%     
%     informatnike(:,i)=[1;0;0];
%    
% end
%     
% cd 'C:\Users\Kevin\Documents\MATLAB Exercises\GlassesNNProblem\Glasses\Raybans'    
% directory=dir;
% 
% for i=1:(length(dir)-2);
%     
%     tempnameray=directory(i+2).name;
%     
%     tempimageray=imread(tempnameray);
%     % reading file name from directory
%     tempscaleray=imresize(tempimageray,resfactor);
%     % resizing image to cut down on pixels
%     greyscaleray{i}=rgb2gray(tempscaleray);
%     % turning image to greyscale heatmap
%     matrixscaleray=cell2mat(greyscaleray(i));
%     imagematray(:,i)=reshape(matrixscaleray,1,[]);
%     
%     informatray(:,i)=[0;2;0];
%    
% end  
%     
% cd 'C:\Users\Kevin\Documents\MATLAB Exercises\GlassesNNProblem\No Glasses'    
% directory=dir;
%     
% for i=1:(length(dir)-2);
%     
%     tempnamenone=directory(i+2).name;
%     
%     tempimagenone=imread(tempnamenone);
%     % reading file name from directory
%     tempscalenone=imresize(tempimagenone,resfactor);
%     % resizing image to cut down on pixels
%     greyscalenone{i}=rgb2gray(tempscalenone);
%     % turning image to greyscale heatmap
%     matrixscalenone=cell2mat(greyscalenone(i));
%     imagematnone(:,i)=reshape(matrixscalenone,1,[]);
%     
%     informatnone(:,i)=[0;0;1];
%    
% end
% 
% % For loading in a set of test images to check NN accuracy
% cd 'C:\Users\Kevin\Documents\MATLAB Exercises\GlassesNNProblem\Test2'    
% directory=dir;
%     
% for i=1:(length(dir)-2);
%     
%     tempnametest=directory(i+2).name;
%     
%     tempimagetest=imread(tempnametest);
%     % reading file name from directory
%     tempscaletest=imresize(tempimagetest,resfactor);
%     % resizing image to cut down on pixels
%     greyscaletest{i}=rgb2gray(tempscaletest);
%     % turning image to greyscale heatmap
%     matrixscaletest=cell2mat(greyscaletest(i));
%     imagemattest(:,i)=reshape(matrixscaletest,1,[]);
%     
%     testfullimage{i}=imread(tempnametest);
% end
% 
% cd 'C:\Users\Kevin\Documents\MATLAB Exercises\GlassesNNProblem' 
% save glassesinfo
% % For loading dataset to avoid repetitive for loop runs
% 
% cd 'C:\Users\Kevin\Documents\MATLAB Exercises\GlassesNNProblem'
% 
% load('glassesinfo.mat');
% 
% imagematall=double([imagematnike,imagematray,imagematnone]);
% % imagematallcell=num2cell(imagematall);
% 
% informatall=[informatnike,informatray,informatnone];
% % informatallcell=num2cell(informatall);
% 
% % NN Section
% 
% % Solve a Pattern Recognition Problem with a Neural Network
% % Script generated by Neural Pattern Recognition app
% % Created 13-May-2019 18:38:26
% %
% % This script assumes these variables are defined:
% %
% %   imagematall - input data.
% %   informatall - target data.
% 
% x = imagematall;
% t = informatall;
% 
% % Choose a Training Function
% % For a list of all training functions type: help nntrain
% % 'trainlm' is usually fastest.
% % 'trainbr' takes longer but may be better for challenging problems.
% % 'trainscg' uses less memory. Suitable in low memory situations.
% trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.
% 
% % Create a Pattern Recognition Network
% hiddenLayerSize = 10;
% net = patternnet(hiddenLayerSize, trainFcn);
% 
% % Setup Division of Data for Training, Validation, Testing
% net.divideParam.trainRatio = 70/100;
% net.divideParam.valRatio = 15/100;
% net.divideParam.testRatio = 15/100;
% 
% % Train the Network
% [net,tr] = train(net,x,t);
% 
% % Test the Network
% y = net(x);
% e = gsubtract(t,y);
% performance = perform(net,t,y)
% tind = vec2ind(t);
% yind = vec2ind(y);
% percentErrors = sum(tind ~= yind)/numel(tind);
% 
% % View the Network
% % view(net)
% 
% % Plots
% % Uncomment these lines to enable various plots.
% %figure, plotperform(tr)
% %figure, plottrainstate(tr)
% %figure, ploterrhist(e)
% %figure, plotconfusion(t,y)
% %figure, plotroc(t,y)
% 
% save glassesinfo

%% Testing/Plotting section 
load('glassesinfo.mat');

picnumber=38;
imshow(cell2mat(testfullimage(picnumber)));
figure
imshow(cell2mat(greyscaletest(picnumber)));
test1image=sim(net,double(imagemattest(:,picnumber)));

location=find(test1image==max(max(test1image)));

if location==1
    
    disp('Nike')
    disp('Glasses=yes')
elseif location==2
    disp('Ray Ban')
    disp('Glasses=yes')
elseif location==3
    disp('None')
    disp('Glasses=No')

end



